<?php

/**
 * @file
 * Contains workbench_access.module.
 */

use Drupal\node\NodeTypeInterface;
use Drupal\node\NodeInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Session\AccountInterface;

/**
 * Defines the name of the node access control field.
 */
define('WORKBENCH_ACCESS_FIELD', 'field_workbench_access');

/**
 * Implements hook_help().
 */
function workbench_access_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the workbench_access module.
    case 'help.page.workbench_access':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Hierarchical access control module.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Restricts selection options for the node form.
 */
function workbench_access_form_node_form_alter(&$form, FormStateInterface $form_state) {
  $manager = \Drupal::getContainer()->get('plugin.manager.workbench_access.scheme');
  if ($scheme = $manager->getActiveScheme()) {
    $node = $form_state->getFormObject()->getEntity();
    $field = $scheme->fields('node', $node->bundle());
    $account = \Drupal::currentUser();
    // If the user cannot access the form element or is a superuser, ignore.
    if (!empty($form[$field]['#access']) && !$account->hasPermission('bypass workbench access')) {
      $form[$field] = $scheme->alterOptions($form[$field], $manager);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Adds Workbench Access options to the node type form.
 *
 * @see NodeTypeForm::form().
 * @see menu_ui_form_node_type_form_builder().
 */
function workbench_access_form_node_type_form_alter(&$form, FormStateInterface $form_state) {
  // Add a checkbox to registration form about agreeing to terms of use.
  $type = $form_state->getFormObject()->getEntity();
  $form['workflow']['workbench_access_status'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable Workbench Access control for @type content.', array('@type' => $type->label())),
    '#description' => t('If selected, all @type content will be subject to editorial access restrictions.', array('@type' => $type->label())),
    '#default_value' => $type->getThirdPartySetting('workbench_access', 'workbench_access_status', 0),
    '#access' => \Drupal::currentUser()->hasPermission('administer workbench access'),
  );
  $form['#entity_builders'][] = 'workbench_access_form_node_type_form_builder';
 }

/**
 * Entity builder for the node type form with Workbench Access options.
 *
 * @see workbench_access_form_node_type_form_alter().
 */
function workbench_access_form_node_type_form_builder($entity_type, NodeTypeInterface $type, &$form, FormStateInterface $form_state) {
  $type->setThirdPartySetting('workbench_access', 'workbench_access_status', $form_state->getValue('workbench_access_status'));
}

/**
 * Creates our fields for an entity bundle.
 *
 * @param $entity_type
 *   The entity type being created. Users are supported.
 * @param $bundle
 *   The bundle being created.
 */
function workbench_access_confirm_fields($entity_type, $bundle) {
  $text = [
    'user' => [
      'type' => 'user',
      'label' => 'Sections', // @TODO tie to config
      'description' => 'Assign the editorial sections that this user belongs to.',
    ]
  ];
  $id = $entity_type . '.' . $bundle . '.' . WORKBENCH_ACCESS_FIELD;

  if (!$field = \Drupal::entityManager()->getStorage('field_config')->load($id)) {
    $field = array(
      'field_name' => WORKBENCH_ACCESS_FIELD,
      'entity_type' => $entity_type,
      'label' => $text[$entity_type]['label'],
      'bundle' => $bundle,
      'required' => FALSE,
      'description' => $text[$entity_type]['description'],
      'default_value_callback' => 'Drupal\workbench_access\WorkbenchAccessManager::getDefaultValue',
    );
    $field_config = \Drupal::entityManager()->getStorage('field_config')->create($field);
    $field_config->save();
  }
  // Installing without setting form display leaves the field hidden, which is
  // what we want right now. @TODO: UI for user form.
}

/**
 * Implements hook_node_access().
 */
function workbench_access_node_access(NodeInterface $node, $op, AccountInterface $account) {
  // Check that our access control is configured.
  $manager = \Drupal::service('plugin.manager.workbench_access.scheme');
  if ($scheme = $manager->getActiveScheme()) {
    return $scheme->checkEntityAccess($node, $op, $account, $manager);
  }
  else {
    return AccessResult::neutral();
  }
}

function workbench_access_views_data_alter(array &$data) {

  $manager = \Drupal::getContainer()->get('plugin.manager.workbench_access.scheme');
  if ($scheme = $manager->getActiveScheme()) {
    $data['node']['workbench_access_section'] = array(
      'title' => t('Workbench Section'),
      'help' => t('The sections to which this content belongs.'),
      'field' => array(
        'id' => 'workbench_access_section',
      ),
      'filter' => array(
        'field' => 'nid',
        'id' => 'workbench_access_section',
      ),
    );
    $data['users']['workbench_access_section'] = array(
      'title' => t('Workbench Section'),
      'help' => t('The sections to which this user belongs.'),
      'field' => array(
        'id' => 'workbench_access_user_section',
      ),
      'filter' => array(
        'field' => 'uid',
        'id' => 'workbench_access_user_section',
      ),
    );
  }

}
